/**
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation, either version 3 of the
* License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*
**/

#include <math.h>

namespace Donut
{

	// Constructors;
	Vector2 vector2(const double _x, const double _y)
	{
		Vector2 out;
		out.x = _x;
		out.y = _y;
		return out;
	}
	Vector2 vector2(const double _v)
	{
		Vector2 out;
		out.x = _v;
		out.y = _v;
		return out;
	}

	// Operators
	Vector2 operator*(const Vector2& _v1, double _factor)
	{
		Vector2 out(_v1);
		out.x *= _factor;
		out.y *= _factor;
		return out;
	}
	Vector2 operator/(const Vector2& _v1, double _factor)
	{
		Vector2 out(_v1);
		out.x /= _factor;
		out.y /= _factor;
		return out;
	}

	Vector2 operator+(const Vector2& _v1, const Vector2& _v2)
	{
		return vector2(_v1.x + _v2.x, _v1.y + _v2.y);
	}

	Vector2 operator-(const Vector2& _v1, const Vector2& _v2)
	{
		return vector2(_v1.x - _v2.x, _v1.y - _v2.y);
	}

	// Cannonic operations
	double dotProd(const Vector2& _v1, const Vector2& _v2)
	{
		return _v1.x * _v2.x + _v1.y * _v2.y;
	}

	double length(const Vector2& _v1)
	{
		return sqrt(_v1.x * _v1.x + _v1.y * _v1.y);
	}

	double length2(const Vector2& _v1)
	{
		return (_v1.x * _v1.x + _v1.y * _v1.y);
	}
}