<?xml version="1.0"?>
<pipeline name="complete">

	<!-- First g buffer pass -->
	<pass type="geometry" name="GBuffer">
		<canvas>
			<depth_test_on/>
			<outputs>
				<color name="albedo"/>
				<color name="world_normal"/>
				<color name="specular"/>
				<color name="world_position"/>
				<depth name="depth"/>
			</outputs>
		</canvas>
	</pass>

	<!-- Deffered lighting pass -->
	<pass type="vfx" name="Deferred Lighting">
		<canvas>
			<depth_test_off/>
			<outputs>
				<color name="deffered"/>
			</outputs>
		</canvas>
		<vfx type="deffered"/>
	</pass>

	<!-- SSAO PASS -->
	<pass type="vfx" name="SSAO">
		<canvas>
			<depth_test_off/>
			<outputs>
				<color name="ssao_prefiltered"/>
			</outputs>
		</canvas>
		<vfx type="simplefx">
			<shader>
				<vertex location="common/shaders/ssfx/ssao/vertex.glsl"/>
				<fragment location="common/shaders/ssfx/ssao/fragment.glsl"/>
			</shader>
			<textures>
				<texture2D name="random" location="common/textures/random.jpg"/>
			</textures>
		</vfx>
	</pass>

	<!-- SSAO FILTERING PASS -->
	<pass type="vfx" name="SSAO Blur">
		<canvas>
			<depth_test_off/>
			<outputs>
				<color name="ssao_filtered"/>
			</outputs>
		</canvas>
		<vfx type="simplefx">
			<shader>
				<vertex location="common/shaders/ssfx/blur/vertex.glsl"/>
				<fragment location="common/shaders/ssfx/blur/fragment.glsl"/>
			</shader>
		</vfx>
	</pass>

	<!-- Environement lighting pass -->
	<pass type="vfx" name="Env Lighting">
		<canvas>
			<depth_test_off/>
			<outputs>
				<color name="envmap"/>
			</outputs>
		</canvas>
		<vfx type="environement"/>
	</pass>

	<!-- Compositing lighting pass -->
	<pass type="vfx" name="Composition">
		<canvas>
			<depth_test_off/>
			<outputs>
				<color name="composed"/>
			</outputs>
		</canvas>
		<vfx type="simplefx">
			<shader>
				<vertex location="common/shaders/ssfx/cmp/vertex.glsl"/>
				<fragment location="common/shaders/ssfx/cmp/fragment.glsl"/>
			</shader>
		</vfx>
	</pass>

	<!-- Reflection pass -->
	<pass type="vfx" name="SSR">
		<canvas>
			<depth_test_off/>
			<outputs>
				<color name="reflection"/>
			</outputs>
		</canvas>
		<vfx type="skybox">
			<shader>
				<vertex location="common/shaders/ssfx/ssr/raymarch_vertex.glsl"/>
				<fragment location="common/shaders/ssfx/ssr/raymarch_fragment.glsl"/>
			</shader>
		</vfx>
	</pass>

	<!-- Blurring the reflection buffer pass -->
	<pass type="vfx" name="SSR BlurV">
		<canvas>
			<depth_test_off/>
			<outputs>
				<color name="reflection_smoothV"/>
			</outputs>
		</canvas>
		<vfx type="simplefx">
			<shader>
				<vertex location="common/shaders/ssfx/ssr/smoothV_vertex.glsl"/>
				<fragment location="common/shaders/ssfx/ssr/smoothV_fragment.glsl"/>
			</shader>
		</vfx>
	</pass>

	<!-- Blurring the reflection buffer pass -->
	<pass type="vfx" name="SSR BlurH">
		<canvas>
			<depth_test_off/>
			<outputs>
				<color name="reflection_smoothH"/>
			</outputs>
		</canvas>
		<vfx type="simplefx">
			<shader>
				<vertex location="common/shaders/ssfx/ssr/smoothH_vertex.glsl"/>
				<fragment location="common/shaders/ssfx/ssr/smoothH_fragment.glsl"/>
			</shader>
		</vfx>
	</pass>

	<!-- Compose the SSR -->
	<pass type="vfx" name="SSR compose" >
		<canvas>
			<depth_test_off/>
			<outputs>
				<color name="dof_input"/>
			</outputs>
		</canvas>
		<vfx type="simplefx">
			<shader>
				<vertex location="common/shaders/ssfx/ssr/compose_vertex.glsl"/>
				<fragment location="common/shaders/ssfx/ssr/compose_fragment.glsl"/>
			</shader>
		</vfx>
	</pass>

	<!-- Depth of field pass -->
	<pass type="vfx" name="DOF">
		<canvas>
			<depth_test_off/>
			<outputs>
				<color name="srgb_input"/>
			</outputs>
		</canvas>
		<vfx type="simplefx">
			<shader>
				<vertex location="common/shaders/ssfx/dof/vertex.glsl"/>
				<fragment location="common/shaders/ssfx/dof/fragment.glsl"/>
			</shader>
		</vfx>
	</pass>

	<!-- Apply an srgb response-->
	<pass type="vfx" name="Final">
		<canvas>
			<depth_test_off/>
		</canvas>
		<vfx type="simplefx">
			<shader>
				<vertex location="common/shaders/ssfx/srgb/vertex.glsl"/>
				<fragment location="common/shaders/ssfx/srgb/fragment.glsl"/>
			</shader>
		</vfx>
	</pass>
</pipeline>   
